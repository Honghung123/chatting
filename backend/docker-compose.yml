services:
  
  postgres_database: 
    image: postgres:16-alpine
    container_name: container_postgres
    restart: unless-stopped
    env_file: .env
    ports:
      - 5433:5432
    environment:
      - POSTGRES_DB=$DB_NAME
      - POSTGRES_USER=$DB_USER
      - POSTGRES_PASSWORD=$DB_PASSWORD
      - PGDATA=/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "$DB_USER", "-d", "$DB_NAME"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    networks:
      - chatting_network

  redis_storage:
    image: redis:7.4-alpine
    container_name: chatting_container_redis
    restart: unless-stopped
    env_file: .env
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    networks:
      - chatting_network

  rabbit_mq:
    image: rabbitmq:4.0.6-management-alpine
    container_name: chatting_container_rabbitmq
    restart: unless-stopped
    env_file: .env
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    networks:
      - chatting_network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    healthcheck:
      test: ["CMD", "zookeeper-shell", "localhost:2181", "ls", "/"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    networks:
      - chatting_network

  kafka_mq:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_mq:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    # healthcheck:
    #   test: ["CMD-SHELL", "echo 'test-message' | kafka-console-producer.sh --broker-list localhost:9092 --topic health-check-topic && kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic health-check-topic --from-beginning --max-messages 1 | grep 'test-message'"]
    #   interval: 15s
    #   timeout: 10s
    #   retries: 3
    networks:
      - chatting_network

  chatting_application:
    depends_on:
      postgres_database:
        condition: service_healthy
      redis_storage:
        condition: service_healthy
      rabbit_mq:
        condition: service_healthy
    container_name: chatting-application
    env_file: .env
    environment: 
      - DB_URL=jdbc:postgresql://postgres_database:5432/chatting_db
      - REDIS_HOST=redis_storage
      - KAFKA_URL=kafka_mq:9092
      - RABBITMQ_HOST=rabbit_mq
      - RABBITMQ_PORT=5672
    build:
      context: .
      dockerfile: ./Dockerfile
    ports:
      - 8080:8080
    networks:
      - chatting_network

networks:
  chatting_network:
    driver: bridge
